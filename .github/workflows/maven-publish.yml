# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      needReleaseVersion:
        type: boolean
        default: false
        description: Need release version

#  release:
#    types: [created]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'maven-release-plugin')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: |
          echo "Branch details --" ${GITHUB_REF}
          mvn -B clean package --file pom.xml

  Prepare_Release:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.needReleaseVersion == 'true' && github.ref == 'refs/heads/master'
      && (github.event_name != 'pull_request' || github.repository_owner != github.event.pull_request.head.repo.owner.login) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACAP014_GIT_TOKEN }}
          fetch-depth: 0 # Fetch all history for all branches
          ref: master # Explicitly check out the master branch
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build & Prepare Release with Maven
        run: |
          git config user.name ${{ secrets.GIT_USER }}
          git config user.email ${{ secrets.GIT_USER }}@jdnet.deere.com
          git remote -v
          git remote set-url origin https://${{ secrets.GIT_USER }}:${{ secrets.GIT_PASS }}@github.com/${GITHUB_REPOSITORY}.git
          git checkout ${{ github.ref_name }}
          mvn -B -V -s settings.xml release:clean release:prepare release:perform --file pom.xml -Denv.GIT_USER=${{ secrets.GIT_USER }} -Denv.GIT_PASS=${{ secrets.GIT_PASS }}
